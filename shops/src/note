<div className="row" style={{ marginTop: '10px' }}>
      <div className="col-md-12 mx-0 mb-4">
        <div className='row'>
          <h1>cartcount</h1>
        </div>
        <div className="row">

          {products.map((prdouct, index) => (
            <div key={index} className="col-11 col-md-6 col-lg-3 mx-0 mb-4" style={{ marginBottom: '18px' }}>
              <div className='card overflow-hidden h-100 shadow'>
                <img className="card-img-top img-fluid " src=''
                      style={{ width: '100px', height: '100px', }} alt='' />
                <h5>{prdouct.name}</h5>
                <h6 className="card-text text-center">{products.id}</h6>
                <h5 className="card-title text-center">$price</h5>
                <button className="btn btn-success"
                // onClick={()=>dispatch(addProducts(product))}

                >Add to Cart</button>
              </div>
            </div>
          ))
          } 
        </div>
      </div>
    </div>

  const renderList = products.map((product,index) => {
      const { id, title, image, price, description } = product;
        console.log("Component:", products);


        import React from 'react';

export default function Header() {
    return (

        <div class="navbar navbar-dark bg-dark justify-content-center">
            <a class="navbar-brand" href="#">
                <img src="logo192.png" width="30" height="30" alt="" style={{float:'right'}}/>
            </a>
            <button class="btn btn-success me-3" type="submit">Home</button>
            <form class="form-inline">
                <input class="form-control" type="search" placeholder="Search" />
            </form>
            <button class="btn btn-success ms-3" type="submit">Cart</button>
        </div>

    )
}

<NavDropdown title="Categories" id="basic-nav-dropdown">
  <NavDropdown.Item href="#action/3.1">MEN'S</NavDropdown.Item>
  <NavDropdown.Item href="#action/3.2">
      WOMEN'S

  </NavDropdown.Item>
  <NavDropdown.Item href="#action/3.3">ELECTRONICS</NavDropdown.Item>
  <NavDropdown.Divider />
  <NavDropdown.Item href="#action/3.4">
      JEWELERY
  </NavDropdown.Item>
</NavDropdown>

<div className="row" style={{ marginTop: '10px' }}>
  <div className="col-md-12 mx-0 mb-4">
    <div className='row'>
      <h1>cartcount</h1>
    </div>
    <div className="row">

      {products.map((product) => (
        ))
      }
    </div>
  </div>
</div>


import React from "react";
import { useSelector } from 'react-redux';
import ReactStars from "react-rating-stars-component";
import { Link } from "react-router-dom";

const ProductsComponent = () => {
  const products = useSelector((state) => state.allProudcts.proudcts)
  console.log(products);

  const renderList = products.map((product) => {
    const { id, title, image, price, category } = product;
      console.log("Component:", products);
  return (

            <div key={id} className="col-11 col-md-6 col-lg-3 mx-0 mb-4" style={{ marginBottom: '18px' }}>
              <Link to={`/products/${id}`}>
                <div className='custom-card overflow-hidden h-100 shadow'>
                  <img className="card-img-center img-fluid " src={image}
                    style={{ width: '100px', height: '100px', }} alt='' />
                  <h6 className="card-text text-center text-uppercase">{category}</h6>
                  <h5 className="card-title text-center">${price}</h5>
                  <div className='py-2 d-flex justify-content-center fs-6'>
                    <ReactStars
                      count={5}
                      // value={rating}
                      isHalf={true}
                      edit={false}
                      emptyIcon={<i className="far fa-star"></i>}
                      halfIcon={<i className="fa fa-star-half-alt"></i>}
                      fullIcon={<i className="fa fa-star"></i>}
                      activeColor="#ffd700">
                    </ReactStars>
                  </div>
                  <button className="btn btn-success"
                  // onClick={()=>dispatch(addProducts(product))}

                  >Add to Cart</button>
                </div>
              </Link>
            </div>
    );
  });
  return <>{renderList}</>
}
export default ProductsComponent;

import React, { useEffect } from "react";
import axios from 'axios';
import { useDispatch, useSelector } from "react-redux";
import { selectedProducts } from "../redux/action/products_action";
import { Route,useParams } from "react-router";

const ProductsDetails = () => {
    const { productId } = useParams();
    let product = useSelector(state => state.product);
    const{id,title,price,category,image,description} =product
    const dispatch = useDispatch();
    console.log(product);
    // console.log(productId);

    const fetchProuductsDetails = async () => {
        const response = await axios
            .get(`https://fakestoreapi.com/products/${productId}`)
            .catch(err => console.log(err));
        dispatch(selectedProducts(response.data));
    }

    useEffect(() => {
        if (productId && productId !== "") fetchProuductsDetails(productId);
    }, [productId])
    return (
        <div className="ui grid container">
            {Object.keys(product).length === 0 ? (
                <div>Loading...</div>
            ) : (
                <div className="ui placeholder segment">uygfdsa
                    <div className="ui two column stackable center aligned grid">
                        <div className="ui vertical divider">AND</div>
                        <div className="middle aligned row">
                            {/* <div className="column lp">
                                <img className="ui fluid image" src={image} />
                            </div>
                            <div className="column rp">
                                <h1>{title}</h1>
                                <h2>
                                    <a className="ui teal tag label">${price}</a>
                                </h2>
                                <h3 className="ui brown blocj=k heaer">{category}</h3>
                                <p>{description}</p>
                                <div className="ui vertical animated buttob" tabIndex="0">
                                    <div className="hidden content">
                                        <i className="shop icon"></i>
                                    </div> */}
                                    <div className="visible content">Add Card</div>
                                </div>
                            </div>
                        </div>
                //     </div>
                // </div>

            )}

        </div>
    );
};

export default ProductsDetails;

//detail
import React, { useEffect } from "react";
import axios from 'axios';
import { useDispatch, useSelector } from "react-redux";
import { selectedProducts } from "../redux/action/products_action";
import { useParams } from 'react-router-dom';

const ProductsDetails = () => {
    const { id } = useParams();
    let product = useSelector(state => state.product);
    const { title, price, category, image, description } = product
    const dispatch = useDispatch();
    console.log(product);
    // console.log(id);

    const fetchProuductsDetails = async () => {
        const response = await axios
            .get(`https://fakestoreapi.com/products/${id}`)
            .catch(err => console.log(err));
        dispatch(selectedProducts(response.data));
    }

    useEffect(() => {
        if (id && id !== "") fetchProuductsDetails(id);
    }, [id])
    return (
        <div className="ui grid container">
            {Object.keys(product).length === 0 ? (
                // <div>Loading...</div>
                // <div className="ui active centered inline loader"></div>
            ) : (
                <div className="ui placeholder segment">
                    <div className="ui two column stackable center aligned grid">
                        <div className="ui vertical divider">AND</div>
                        <div className="middle aligned row">
                            <div className="column lp">
                                <img className="ui fluid image" src={image} />
                            </div>
                            <div className="column rp">
                                <h1>{title}</h1>
                                <h2>
                                    <a className="ui teal tag label">${price}</a>
                                </h2>
                                <h3 className="ui brown block header">{category}</h3>
                                <p>{description}</p>
                                <div className="ui vertical animated button" tabIndex="0">
                                    <div className="hidden content">
                                        <i className="shop icon"></i>
                                    </div>
                                    <div className="visible content">Add Card</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            )}

        </div>
    );
};

export default ProductsDetails;


          {products.map((products,index) => (
              // return (
                <tr key={index}>

                  <td>
                    <img src={products.image} style={{ height: '6rem' }}></img>
                  </td>
                  <td>{products.title} </td>
                  <td>{products.price} </td>
                  {/* <td>Quantity ({product.quantity}) </td> */}
                  <td>
                    {/* <button className='btn btn-info ms-2'
                      onClick={() => updateItemQuantity(item.id, item.quantity - 1)}>-</button>
                    <button className='btn btn-info ms-2'
                      onClick={() => updateItemQuantity(item.id, item.quantity + 1)}>+</button>
                    <button className='btn btn-danger ms-2'
                      onClick={() => removeItem(item.id)}>Remove</button> */}

                  </td>
                </tr>
              // )
              ))};



              ///add to cart

              import React from 'react'
import { useSelector } from 'react-redux';
import { useDispatch } from "react-redux";
import { deletedProducts } from '../redux/action/products_action';

const AddtoCard = () => {
  const product = useSelector(state => state.product);
  const { id,title, price, category, image, description } = product
  console.log(product);
  const dispatch = useDispatch();

  return (
    <section className='py-4 container'>
      <div className='row justify-content-center'>
        <div className="col-12">
          {/* <h5>Cart ({totalUniqueItems}) total Items:({totalItems})</h5> */}
          <table className='table table-light table-hover m-0'>
            <tbody>           
               {Object.keys(product).length === 0 ? (
                <div></div>
                // <div className="ui active centered inline loader"></div>
            ) : (
              <tr key={id}>

              <td>
                <img src={image} style={{ height: '6rem' }}></img>
              </td>
              <td>{title} </td>
              <td>${price} </td>
              <td>Quantity ({category}) </td>
              <td>
                <button className='btn btn-info ms-2'
                  >-</button>
                <button className='btn btn-info ms-2'
                 >+</button>
                <button className='btn btn-danger ms-2'
                  onClick={()=>dispatch(deletedProducts(id))}>Remove</button>

              </td>
            </tr>

            )}
         </tbody>
          </table>

        </div>
        <div className='col-auto ms-auto'>
          {/* <h2>Total Price: ${cartTotal}</h2> */}
        </div>
        <div className='col-auto'>
          {/* <button className='btn btn-danger m-2'
            onClick={() => emptyCart()}>Clear</button> */}
          <button className='btn btn-primary ms-2' >But Now</button>
        </div>

      </div>
    </section>
  )
}
export default AddtoCard



export const productsReducer = (state = initialState, { type, payload }) => {
    switch (type) {
        case ActionTypes.ADD_PRODUCTS:
            if(state.numberproducts==0){
                let product = {
                    id:payload.id,
                    quantity:1,
                    name:payload.name,
                    image:payload.image,
                    price:payload.price
                } 
                state.products.push(product); 
            }
            else{
                let check = false;
                state.products.map((product,key)=>{
                    if(product.id==payload.id){
                        state.products[key].quantity++;
                        check=true;
                    }
                });
                if(!check){
                    let _cart = {
                        id:payload.id,
                        quantity:1,
                        name:payload.name,
                        image:payload.image,
                        price:payload.price
                    }
                    state.products.push(_cart);
                }
            }
            return{
                ...state,
                numberproducts:state.numberproducts+1
            }
        }
    }
        

import { DELETE_PRODUCTS,DECREASE_PRODUCTS,SELECTED_PRODUCTS,INCREASE_PRODUCTS,
    GET_NUMBER_CART,ADD_PRODUCTS} from "../constant/action-type";

const initialState = {
    numberproducts:0,
    products: [],
    _products:[]
};
// console.log(initialState)
export const productsReducer = (state = initialState, { type, payload }) => {
    switch(type){
        case SELECTED_PRODUCTS: 
            return{
                ...state,
                _products:payload
            }
        case GET_NUMBER_CART:
                return{
                    ...state
                }
        case ADD_PRODUCTS:
            if(state.numberproducts==0){
                let product = {
                    id:payload.id,
                    quantity:1,
                    // name:payload.name,
                    image:payload.image,
                    price:payload.price
                } 
                state.products.push(product); 
            }
            else{
                let check = false;
                state.products.map((item,key)=>{
                    if(item.id==payload.id){
                        state.products[key].quantity++;
                        check=true;
                    }
                });
                if(!check){
                    let _products = {
                        id:payload.id,
                        quantity:1,
                        // name:action.payload.name,
                        image:payload.image,
                        price:payload.price
                    }
                    state.products.push(_products);
                }
            }
            return{
                ...state,
                numberproducts:state.numberproducts+1
            }
            case INCREASE_PRODUCTS:
                state.numberproducts++
                state.products[payload].quantity++;
              
               return{
                   ...state
               }
            case DECREASE_PRODUCTS:
                let quantity = state.products[payload].quantity;
                if(quantity>1){
                    state.numberproducts--;
                    state.products[payload].quantity--;
                }
              
                return{
                    ...state
                }
            case DELETE_PRODUCTS:
                let quantity_ = state.products[payload].quantity;
                return{
                    ...state,
                    numberproducts:state.numberproducts - quantity_,
                    products:state.products.filter(item=>{
                        return item.id!=state.products[payload].id
                    })
                   
                }
        default:
            return state;
    }
}


//             const exist = state.find((x) => x.id === product.id);
//             if (exist) {
//                 return state.map((x) =>
//                     x, id === product.id ? { ...x, qty: x.qty + 1 } : x
//                 );
//             }
//             else {
//                 const product = payload;
//                 return [
//                     ...state, {
//                         ...product,
//                         qty: 1,
//                     }
//                 ]
//             }
//             break;
//         case ActionTypes.DELETE_PRODUCTS:
//             const exist1 = state.find((x) => x.id === product.id);
//             if (exist1.qty === 1) {
//                 return state.filter((x) => x.id !== exist1.id);
//             }
//             else {
//                 return state.map((x) => x.id === product.id ? { ...x, qty: x.qty - 1 } : x
//                 );
//             }
//             break;
//     }
// }      \\



import { combineReducers } from 'redux';
import { ActionTypes } from "../constant/action-type";

const initialState = {
    numberProduct:0,
    products:[],
    _products:[]
}

function todoProduct(state = initialState,{type,payload}){
    switch(type){
        case ActionTypes.SELECTED_PRODUCTS: 
            return{
                ...state,
                _products:payload
            }
        case ActionTypes.GET_NUMBER_CART:
                return{
                    ...state
                }
        case ActionTypes.ADD_PRODUCTS:
            if(state.numberProduct==0){
                let product = {
                    id:payload.id,
                    title:payload.title,
                    quantity:1,
                    name:payload.name,
                    image:payload.image,
                    price:payload.price
                } 
                state.products.push(product); 
            }
            else{
                let check = false;
                state.products.map((item,key)=>{
                    if(item.id==payload.id){
                        state.products[key].quantity++;
                        check=true;
                    }
                });
                if(!check){
                    let _products = {
                        id:payload.id,
                        title:payload.title,
                        quantity:1,
                        name:payload.name,
                        image:payload.image,
                        price:payload.price
                    }
                    state.products.push(_products);
                }
            }
            return{
                ...state,
                numberProduct:state.numberProduct+1
            }
            case ActionTypes.INCREASE_PRODUCTS:
                state.numberProduct++
                state.products[payload].quantity++;
              
               return{
                   ...state
               }
            case ActionTypes.DECREASE_PRODUCTS:
                let quantity = state.products[payload].quantity;
                if(quantity>1){
                    state.numberProduct--;
                    state.products[payload].quantity--;
                }
              
                return{
                    ...state
                }
            case ActionTypes.DELETE_PRODUCTS:
                let quantity_ = state.products[payload].quantity;
                return{
                    ...state,
                    numberProduct:state.numberProduct - quantity_,
                    products:state.products.filter(item=>{
                        return item.id!=state.products[payload].id
                    })
                   
                }
        default:
            return state;
    }
}
const ShopApp = combineReducers({
    _todoProduct:todoProduct
});
export default ShopApp;